%% 2-D SCF-FEM (Potential = 0, -1/2\Delta)
% Grossâ€“Pitaevskii Equation of BEC (domain = [-8, 8]^2)
% Smallest eigen value and its corresponding eigen function and electron
% density

%% RANK TEST: How TT rank influences error


%%% Set-up
xy_half_range = 8;
xy_ep = [-xy_half_range xy_half_range -xy_half_range xy_half_range];
gqr = [5 5];
tol = 1e-14;
max_iter = 50;
d = 6;
N = 2^d+1;


%%% Reference
output_ref = gpeq_2d_simple(N, xy_ep, gqr, tol, max_iter);


%%% Solve the problem
r_list = 1:10;
output = cell(length(r_list), 1);
for i = 1:length(r_list)
    output{i} = gpeq_2d_simple(N, xy_ep, gqr, tol, max_iter, ...
                               {'ALS', 'DMRG'}, r_list(i));
end


%%% Annotation of plot
ann_text = ['Problem:\enspace$\;(a_s=(4\pi)^{-1}, \:\; m={\hbar}^2)$', ...
            newline, '$[-\frac{1}{2}{\Delta}u+u^2]u', ...
            '={\lambda}u\enspace$ on $\enspace\Omega=[-', ...
            num2str(xy_half_range),',', num2str(xy_half_range), ']^2$', ...
            newline, '\qquad$\qquad\quad\;\;u = 0', ...
            '\enspace\:\enspace$ on $\enspace\partial\Omega$', newline, ...
            'Tolerance = $10^{', num2str(log10(tol)), ...
            '},\quad$ ', newline, 'Reference:$\;d=', num2str(d), '$'];


%%% Error plot of eigen value

% Reorganize error
ev = zeros(length(r_list), 2);
for i = 1:length(r_list)
    ev(i, :) = table2array(output{i}.eigen_value);
end
ev_ref = table2array(output_ref.eigen_value);

% Plot
fem_err_plot(r_list, abs(ev-ev_ref), [0 10], ...
             'Max TT Rank', 'err', 0:11, -18:2:2, [], ...
             ['Error of $1^{st}$ Eigen Value ($Rank = ', ...
              num2str(r_list(1)), '\sim', num2str(r_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'ALS', '2-site DMRG'}, ...
             [5 -14], [ann_text, ' $\ \;\enspace\quad', ...
                       '({\lambda}_{1}=', num2str(ev_ref), ')$']);


%%% Error plot of eigen function

% Calculate the error
ef_err = zeros(length(r_list), 2);
for i = 1:length(r_list)
    ef_err(i, 1) = ...
        fem_err_2d_tt(output{i}.eigen_function.ALS, ...
                      output_ref.eigen_function.FEM, ...
                      output_ref.H1_mat);
    ef_err(i, 2) = ...
        fem_err_2d_tt(output{i}.eigen_function.DMRG, ...
                      output_ref.eigen_function.FEM, ...
                      output_ref.H1_mat);
end

% Plot
fem_err_plot(r_list, ef_err, [0 10], ...
             'Max TT Rank', 'err', 0:11, -14:2:2, [], ...
             ['$H^1$ Error of $1^{st}$ Eigen Function ($Rank = ', ...
              num2str(r_list(1)), '\sim', num2str(r_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'ALS', '2-site DMRG'}, [5 -11], ann_text);


%%% Error plot of electron density

% Calculate the error
rho_err = zeros(length(r_list), 2);
for i = 1:length(r_list)
    rho_err(i, 1) = ...
        fem_err_2d_tt(full(output{i}.eigen_function.ALS).^2, ...
                      output_ref.eigen_function.FEM.^2, ...
                      output_ref.H1_mat);
    rho_err(i, 2) = ...
        fem_err_2d_tt(output{i}.eigen_function.DMRG.^2, ...
                      output_ref.eigen_function.FEM.^2, ...
                      output_ref.H1_mat);
end

% Plot
fem_err_plot(r_list, rho_err, [0 10], ...
             'Max TT Rank', 'err', 0:11, -16:2:2, [], ...
             ['$H^1$ Error of $1^{st}$ Electron Density ', ...
              '($Rank = ', num2str(r_list(1)), '\sim', ...
              num2str(r_list(end)), '$)', newline, '2$\mbox{-}$D ', ...
              'Gross$\mbox{-}$Pitaevskii Equation with ', ...
              'Dirichlet Boundary'], ...
             'Method', {'ALS', '2-site DMRG'}, [5 -12], ann_text)


%%% Running time and iterations

% Reorganization
[rt, iter] = deal(zeros(length(r_list), 2));
for i = 1:length(r_list)
    rt(i, :) = output{i}.iter_info{'total time', :};
    iter(i, :) = output{i}.iter_info{'iteration', :};
end

% Plot
fem_err_plot(r_list, rt, [0 0], ...
             'Max TT Rank', 'Time (sec)', 0:11, -2:0.5:5, [], ...
             ['Total Time of SCF ($Rank = ', num2str(r_list(1)), ...
              '\sim', num2str(r_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'ALS', '2-site DMRG'}, [5 -0.5], ann_text);
fem_err_plot(r_list, iter, [0 0], ...
             'Max TT Rank', 'Time (sec)', 0:11, 0:8, [], ...
             ['Total Iterations of SCF ($Rank = ', num2str(r_list(1)), ...
              '\sim', num2str(r_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'ALS', '2-site DMRG'}, [5 2], ann_text);


%% LEVEL TEST: How level of grid influence error


%%% Set-up
xy_half_range = 8;
xy_ep = [-xy_half_range xy_half_range -xy_half_range xy_half_range];
dom_size = xy_ep([2 4])-xy_ep([1 3]);
gqr = [5 5];
tol = 1e-14;
max_iter = 50;
rmax = 8;


%%% Reference
output_ref = gpeq_2d_simple(2^7+1, xy_ep, gqr, tol, max_iter);


%%% Solve the problem
d_list = 2:6;
output = cell(length(d_list), 1);
for i = 1:length(d_list)
    output{i} = gpeq_2d_simple(2^d_list(i)+1, xy_ep, gqr, tol, ...
                               max_iter, {'FEM', 'ALS', 'DMRG'}, rmax);
end


%%% Annotation of plot
ann_text = ['Problem:\enspace$\;(a_s=(4\pi)^{-1}, \:\; m={\hbar}^2)$', ...
            newline, '$[-\frac{1}{2}{\Delta}u+u^2]u', ...
            '={\lambda}u\enspace$ on $\enspace\Omega=[-', ...
            num2str(xy_half_range),',', num2str(xy_half_range), ']^2$', ...
            newline, '\qquad$\qquad\quad\;\;u = 0', ...
            '\enspace\:\enspace$ on $\enspace\partial\Omega$', newline, ...
            'Tolerance = $10^{', num2str(log10(tol)), ...
            '},\quad$Reference:$\;d=7$', newline, 'Max TT Rank$\ =8$'];


%%% Error plot of eigen value

% Reorganize error
ev = zeros(length(d_list), 3);
for i = 1:length(d_list)
    ev(i, :) = table2array(output{i}.eigen_value);
end
ev_ref = table2array(output_ref.eigen_value);

% Plot
fem_err_plot(2*xy_half_range./(2.^d_list+1), abs(ev-ev_ref), 10, ...
             'h', 'err', -0.8:0.1:0.6, -7.2:0.4:-2, [2 0.57], ...
             ['Error of $1^{st}$ Eigen Value ($d = ', ...
              num2str(d_list(1)), '\sim', num2str(d_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'eigs()', 'ALS', '2-site DMRG'}, ...
             [-0.2 -6], [ann_text, ' $\enspace\quad', ...
                         '({\lambda}_{1}=', num2str(ev_ref), ')$']);


%%% Error plot of eigen function

% Calculate the error
ef_err = zeros(length(d_list), 3);
for i = 1:length(d_list)
    ef_err(i, 1) = fem_err_2d_tt(output{i}.eigen_function.FEM, ...
                                 output_ref.eigen_function.FEM, ...
                                 output_ref.H1_mat);
    ef_err(i, 2) = fem_err_2d_tt(output{i}.eigen_function.ALS, ...
                                 output_ref.eigen_function.FEM, ...
                                 output_ref.H1_mat);
    ef_err(i, 3) = fem_err_2d_tt(output{i}.eigen_function.DMRG, ...
                                 output_ref.eigen_function.FEM, ...
                                 output_ref.H1_mat);
end

% Plot
fem_err_plot(2*xy_half_range./(2.^(2:6)+1), ef_err, 10, ...
             'h', 'err', -0.8:0.1:0.6, -4.4:0.4:-0.4, [1 0.57], ...
             ['$H^1$ Error of $1^{st}$ Eigen Function ($d = ', ...
              num2str(d_list(1)), '\sim', num2str(d_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'eigs()', 'ALS', '2-site DMRG'}, ...
             [-0.1 -3.6], ann_text);


%%% Error plot of electron density

% Calculate the error
rho_err = zeros(5, 3);
for i = 1:5
    rho_err(i, 1) = fem_err_2d_tt(output{i}.eigen_function.FEM.^2, ...
                                  output_ref.eigen_function.FEM.^2, ...
                                  output_ref.H1_mat);
    rho_err(i, 2) = fem_err_2d_tt(output{i}.eigen_function.ALS.^2, ...
                                  output_ref.eigen_function.FEM.^2, ...
                                  output_ref.H1_mat);
    rho_err(i, 3) = fem_err_2d_tt(output{i}.eigen_function.DMRG.^2, ...
                                  output_ref.eigen_function.FEM.^2, ...
                                  output_ref.H1_mat);
end

% Plot
fem_err_plot(2*xy_half_range./(2.^(2:6)+1), rho_err, 10, ...
             'h', 'err', -0.8:0.1:0.6, -4:0.4:0, [1 0.56], ...
             ['$H^1$ Error of $1^{st}$ Electron Density ', ...
              '($d = ', num2str(d_list(1)), '\sim', ...
              num2str(d_list(end)), '$)', newline, ...
              '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii Equation with ', ...
              'Dirichlet Boundary'], ...
             'Method', {'eigs()', 'ALS', '2-site DMRG'}, ...
             [-0.2 -3.2], ann_text)


%%% Running time and iterations

% Reorganization
[rt, iter] = deal(zeros(length(d_list), 3));
for i = 1:length(d_list)
    rt(i, :) = output{i}.iter_info{'total time', :};
    iter(i, :) = output{i}.iter_info{'iteration', :};
end

% Plot
fem_err_plot(2*xy_half_range./(2.^d_list+1), rt, [10 10], ...
             'h', 'Time', -0.8:0.1:0.6, -2:0.4:2, [], ...
             ['Total Time of SCF ($d = ', num2str(d_list(1)), ...
              '\sim', num2str(d_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'eigs()', 'ALS', '2-site DMRG'}, ...
             [-0.1 1.2], ann_text);
fem_err_plot(2*xy_half_range./(2.^d_list+1), iter, [10 0], ...
             'h', 'Iteration', -0.8:0.1:0.6, 0:2:20, [], ...
             ['Total Iterations of SCF ($d = ', num2str(d_list(1)), ...
              '\sim', num2str(d_list(end)), '$)', ...
              newline, '2$\mbox{-}$D Gross$\mbox{-}$Pitaevskii ', ...
              'Equation with Dirichlet Boundary'], ...
             'Method', {'FEM', 'ALS', '2-site DMRG'}, [-0.2 3], ann_text);